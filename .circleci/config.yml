version: 2.1
orbs:
  snyk: snyk/snyk@1.7.0
defaults: &defaults
  docker:
    - image: google/cloud-sdk@sha256:126a49cfa2aa6e20d561fa14999bf657bc341efeba04939bd2f612bf843d12a6
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Generate full image name for new docker image
          command: |
            set -x
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              DOCKER_IMAGE_TAG=v${CIRCLE_BUILD_NUM}
              echo "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" > full_docker_image_name
            else
              DOCKER_IMAGE_TAG=${CIRCLE_BRANCH}
              echo "hello-app:$DOCKER_IMAGE_TAG" > full_docker_image_name
            fi
      - run:
          name: Build image
          command: |
            FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)
            docker build -t $FULL_DOCKER_IMAGE_NAME -f hello-app/Dockerfile hello-app/
      - run:
          name: Push image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)
              echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > gcloud-service-key.json
              gcloud auth activate-service-account --key-file gcloud-service-key.json
              gcloud --quiet auth configure-docker
              docker push $FULL_DOCKER_IMAGE_NAME
            else
              echo "Not master branch; skipping image push.."
            fi
      - run:
          name: Test local image
          command: |
            set -x
            FULL_DOCKER_IMAGE_NAME=$(cat full_docker_image_name)
            docker run -d --rm -p 8080:8080 --name hello-app $FULL_DOCKER_IMAGE_NAME
            docker run --network container:hello-app appropriate/curl --retry 10 --retry-connrefused http://localhost:8080
            if [ "${CIRCLE_BRANCH}" != "master" ]
            then
              circleci step halt
            fi
      - persist_to_workspace:
          root: .
          paths:
            - full_docker_image_name

  deploy:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - run:
          name: Install utils
          command: |
            apt-get update
            apt-get install jq
      - run:
          name: Deploy
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > gcloud-service-key.json
            set -x
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            EXISTING_CLUSTER=$(gcloud container clusters list --format="value(name)" --filter="name=$GOOGLE_CLUSTER_NAME")
            if [ "${EXISTING_CLUSTER}" != $GOOGLE_CLUSTER_NAME ]
            then
              # Create cluster if it doesn't already exist
              gcloud --quiet container clusters create $GOOGLE_CLUSTER_NAME --num-nodes=1
            else
              gcloud --quiet container clusters get-credentials $GOOGLE_CLUSTER_NAME
            fi
            FULL_DOCKER_IMAGE_NAME=$(cat workspace/full_docker_image_name)
            # Replace DOCKER_IMAGE_NAME placeholder in manifest with actual image name
            KUBE_CONFIG=$(cat hello-app/manifests/helloweb-all-in-one.yaml.template | sed "s|DOCKER_IMAGE_NAME|$FULL_DOCKER_IMAGE_NAME|g")
            echo "$KUBE_CONFIG" | kubectl apply -f -
            # Wait for deployment to finish
            kubectl rollout status deployment/helloweb
            kubectl get pods
      - run:
          name: Test deployed application
          command: |
            # Wait for external ip to be assigned
            sleep 60
            kubectl get service helloweb
            EXTERNAL_IP=$(kubectl get service helloweb -o json | jq -r ".status.loadBalancer.ingress[0].ip")
            curl "http://$EXTERNAL_IP"
      - run:
          name: Tear down application and resources if configured (since this is a demo)
          command: |
            if [ "${DELETE_CLUSTER_AT_END_OF_TEST}" == "true" ]
            then
              kubectl delete service helloweb
              gcloud --quiet container clusters delete $GOOGLE_CLUSTER_NAME
            fi
  vulnerability-scan:
    executor: go
    steps:
      - checkout
      - run:
          name: Setup Scanning
          command: |
              git config --global url."https://$GITHUB_USER:$GITHUB_TOKEN@github.com/circleci/".insteadOf "https://github.com/circleci/"
      - when:
          condition:
              or:
                - equal: [ master, << pipeline.git.branch >> ]
          steps:
              - run:
                  name: Launching Snyk Orb Scanning
                  command: echo "Running snyk/scan on master; uploading the results"
              - run:
                  name: Cleanup RemoteRepoURL
                  command: echo 'export REMOTE_REPO_URL="${CIRCLE_REPOSITORY_URL%".git"}"' >> "$BASH_ENV"
              - snyk/scan:
                  organization: "circleci-public"
                  fail-on-issues: true
                  severity-threshold: high
                  monitor-on-build: true
                  additional-arguments: "--all-projects --remote-repo-url=${REMOTE_REPO_URL} -d"
      - unless:
          condition:
              or:
                - equal: [ master, << pipeline.git.branch >> ]
          steps:
              - run:
                  name: Launching Snyk Orb Scanning
                  command: echo "Running snyk/scan on branch; not uploading the results"
              - snyk/scan:
                  organization: "circleci-public"
                  fail-on-issues: true
                  severity-threshold: high
                  monitor-on-build: false
                  additional-arguments: "--all-projects -d"
workflows:
  build-deploy:
    jobs:
      - build
      - vulnerability-scan:
          context: org-global-employees
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master